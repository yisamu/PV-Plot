
# caculate  effciency every month  8:00  15:00

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from datetime import datetime
from scipy.interpolate import interp1d
import os
import matplotlib as mpl

mpl.rcParams.update({'font.size': 6})

data = pd.read_csv('C:/Users/yandcuo/Desktop/Dr/project/process/data/SunEnergy1_DataSet/Data/CONFIDENTIAL RANCHLAND SOLAR DATA - 5 min data.csv', header=[0, 1])

def convert_date_time(date_string):
    date_object = datetime.strptime(date_string, "%d-%m月-%y %H:%M:%S")
    formatted_date = date_object.strftime("%m/%d/%Y %H:%M")
    return formatted_date

column_name = data.columns[0]
data[column_name] = data[column_name].apply(convert_date_time)

a = data.columns.get_level_values(0).to_series()
b = a.mask(a.str.startswith('Unnamed')).ffill().fillna('')
data.columns = [b, data.columns.get_level_values(1)]
data = data.fillna(method="ffill")

data['Date', 'Timestamp'] = pd.to_datetime(data['Date', 'Timestamp'])
data.set_index(data['Date', 'Timestamp'], inplace=True)
data.drop(('Date', 'Timestamp'), inplace=True, axis=1)
data.replace(['Bad', '#DIV/0!'], pd.NA, inplace=True)


# sns.set_style("darkgrid")

name = 'Inv 2'
timepoint_start = '8:00'
timepoint_end = '17:00'

starttime = '2022-01-01'
endtime = '2022-01-31'

# Convert start and end dates to datetime objects
start_date = datetime.strptime(starttime, '%Y-%m-%d')
end_date = datetime.strptime(endtime, '%Y-%m-%d')


year = start_date.year
month = start_date.month


directory = f'C:/Users/yandcuo/Desktop/Dr/project/process/data/SunEnergy1_DataSet/2023-10/Efficiency/{name}'
os.makedirs(directory, exist_ok=True)


file_name1 = f'histogram_{name}_{month}.svg'
file_name2 = f'efficiency_{name}_{month}.svg'


def calculate_efficiency(ac_w, dc_w):
    ac_w = pd.to_numeric(ac_w, errors='coerce')
    dc_w = pd.to_numeric(dc_w, errors='coerce')
    if ac_w.isna().any() or dc_w.isna().any() or (dc_w == 0).all():
        efficiency = None
    else:
        efficiency = (ac_w / dc_w) * 100
    return efficiency



date_range = pd.date_range(starttime, endtime, freq='D')

# print(date_range)


################## plt hist effciency###############
fig, axes = plt.subplots(4, 8, figsize=(18, 8))
axes = axes.ravel()
daily_mean_efficiency_values = []

for i, day in enumerate(date_range):
    day_str = day.strftime('%Y-%m-%d') #Convert date object day to string format
    #loc data
    day_data = data.loc[day_str]
    time_range_data = day_data.between_time(timepoint_start, timepoint_end)#loc data

    ac_w_data = time_range_data[name]['AC W'].loc[day_str]
    dc_w_data = time_range_data[name]['DC W'].loc[day_str]

    non_zero_mask = dc_w_data != 0

    interp_dc_w_data = dc_w_data.copy()
    interp_dc_w_data[~non_zero_mask] = np.nan
    interp_dc_w_data.interpolate(method='linear', inplace=True)

    efficiency_data = calculate_efficiency(ac_w_data, interp_dc_w_data)

    efficiency_df = pd.DataFrame({'Efficiency (%)': efficiency_data}, index=ac_w_data.index)

    efficiency_df['Efficiency (%)'] = efficiency_df['Efficiency (%)'].apply(
        lambda x: x if (x is not None) and (0 <= x <= 100) else np.nan)
    efficiency_df.dropna(subset=['Efficiency (%)'], inplace=True)  # 删除包含NaN值的行

    mean_efficiency = efficiency_df['Efficiency (%)'].mean()
    daily_mean_efficiency_values.append(mean_efficiency)

    hist_color = 'blue'
    title_color = 'black'

    axes[i].hist(efficiency_df['Efficiency (%)'], bins=20, color=hist_color, alpha=0.7)
    axes[i].set_title(f'Efficiency for {day_str}', color=title_color)
    axes[i].set_xlabel('Efficiency (%)')
    axes[i].set_ylabel('Frequency')

for i in range(len(date_range), len(axes)):
    fig.delaxes(axes[i])

plt.tight_layout()
plt.savefig(os.path.join(directory, file_name1))
plt.show()


################## plt effciency###############
sns.set_style("darkgrid")
plt.figure(figsize=(14, 7))
x_labels = [day.strftime('%Y-%m-%d') for day in date_range]
plt.plot(x_labels, daily_mean_efficiency_values, marker='o', linestyle='-', color='blue')
plt.title(f'{name} Daily Average Efficiency for {month}', fontsize=12)

plt.ylabel('Average Efficiency (%)', fontsize=12)


x_labels = [day.strftime('%m-%d') for day in date_range]
# Set x-axis labels as dates with a step to display only some labels
step = max(len(x_labels) // 5, 1)  # Show every 10th label, adjust as needed
plt.xticks(range(0, len(x_labels), step), [x_labels[i] for i in range(0, len(x_labels), step)],  fontsize=10)
plt.yticks(fontsize=10)

# plt.xticks(range(len(x_labels)), x_labels, rotation=45, fontsize=10)
plt.xlabel('Date', fontsize=12)

plt.grid(True)


# # Set x-axis labels as dates
# date_labels = [date.strftime('%m/%d') for date in unique_dates]
# p
# plt.xlabel('Date')

# for i, label in enumerate(x_labels):
#     plt.text(i, daily_mean_efficiency_values[i], label, ha='center', va='bottom', fontsize=7)

# mark time in line
# for i, date in enumerate(date_range):
#     formatted_date = date.strftime('%m-%d')  # Convert the date object to the format "MM-DD"
#     plt.text(i, daily_mean_efficiency_values[i], formatted_date, ha='center', va='bottom', fontsize=8)

# plt.grid(False)
plt.savefig(os.path.join(directory, file_name2))
plt.show()

